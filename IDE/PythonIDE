import sys
#yawa
import os
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QMessageBox, QTabBar, QHBoxLayout, QWidget, QToolButton,
    QTabWidget, QDockWidget, QTextBrowser, QFileDialog, QAction, QLabel, QToolBar, QLineEdit,QInputDialog,QMenu,QPushButton,QDialog,QTreeView,QFileSystemModel,QHeaderView,
    QVBoxLayout, QSplitter
)
from PyQt5.QtCore import Qt,QDir
from PyQt5.Qsci import QsciScintilla, QsciLexerPython
from PyQt5.QtGui import QKeySequence, QFont, QColor
from qtawesome import icon
import shutil

icon_color = '#007ACC'

class PythonIDE(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set the attribute before creating the QApplication instance
        QApplication.setAttribute(Qt.AA_UseSoftwareOpenGL)

        # Extracted colors from the provided palette
        background_color = QColor(240, 240, 240)  # Light background
        accent_color = QColor(86, 156, 214)  # Blue accent color
        text_color = QColor(0, 0, 0)  # Black text
        highlight_color = QColor(255, 255, 0)  # Yellow highlight color

        # Set up stylesheets with the color palette
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {background_color.name()};
                color: {text_color.name()};
            }}

            QTabBar::tab {{
                background-color: {background_color.name()};
                border: 2px solid {accent_color.name()};
                border-radius: 0px;
                color: {text_color.name()};
                padding: 8px;
                margin-right: 0px;
                font-size: 14px;
            }}

            QTabBar::tab:selected {{
                background-color: {accent_color.name()};
            }}

            QToolBar {{
                background-color: {background_color.name()};
                border: 1px solid {accent_color.name()};
                spacing: 8px;
            }}

            QToolBar QToolButton {{
                background-color: {background_color.name()};
                border: 1px solid {accent_color.name()};
                color: {text_color.name()};
                padding: 6px;
            }}

            QToolBar QToolButton:hover {{
                background-color: {highlight_color.name()};
            }}

            QStatusBar {{
                background-color: {background_color.name()};
                color: {text_color.name()};
            }}

            QLineEdit {{
                background-color: {background_color.name()};
                border: 1px solid {accent_color.name()};
                color: {text_color.name()};
                padding: 10px;
            }}

            QDockWidget {{
                background-color: {background_color.name()};
                border: 2px solid {accent_color.name()};
            }}

            QTextBrowser {{
                background-color: {background_color.name()};
                border: 1px solid {accent_color.name()};
                color: {text_color.name()};
                padding: 10px;
            }}
        """)

        # Initialize the UI
        self.init_ui()

    def init_ui(self):
        # Central Widget - Tab Widget and Console
        central_widget = QWidget(self)
        layout = QVBoxLayout(central_widget)

        # Splitter for Editor and Console
        splitter = QSplitter(Qt.Vertical)

        # Tab Widget
        self.tab_widget = QTabWidget(self)
        self.tab_widget.tabBar().setTabsClosable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.add_new_tab()

        # Console Dock
        self.console_dock = QDockWidget('Interactive Console', self)
        self.console_widget = QTextBrowser()
        self.console_dock.setWidget(self.console_widget)
        self.addDockWidget(Qt.BottomDockWidgetArea, self.console_dock)

        # Add widgets to layout
        splitter.addWidget(self.tab_widget)
        splitter.addWidget(self.console_dock)

        # Add splitter to the main layout
        layout.addWidget(splitter)

        # Set the central widget
        self.setCentralWidget(central_widget)

        # Menu Bar
        menubar = self.menuBar()

        # File Menu
        file_menu = menubar.addMenu('File')
        new_action = self.create_action('New', 'New File', 'Ctrl+N', self.new_file, 'file')
        open_action = self.create_action('Open', 'Open File', 'Ctrl+O', self.open_file, 'folder-open')
        save_action = self.create_action('Save', 'Save File', 'Ctrl+S', self.save_file, 'save')
        file_menu.addActions([new_action, open_action, save_action])

        # Run Menu
        run_menu = menubar.addMenu('Run')
        run_code_action = self.create_action('Run Code', 'Run Code', 'Ctrl+R', self.run_code, 'play')
        run_menu.addAction(run_code_action)

        # View Menu
        view_menu = menubar.addMenu('View')
        toggle_console_action = self.console_dock.toggleViewAction()
        view_menu.addAction(toggle_console_action)

        # Project Menu
        project_menu = menubar.addMenu('Project')
        new_project_action = self.create_action('New Project', 'Create a new project', 'Ctrl+Shift+N', self.new_project, 'folder')
        open_project_action = self.create_action('Open Project', 'Open an existing project', 'Ctrl+Shift+O', self.open_project, 'folder-open')
        save_project_action = self.create_action('Save Project', 'Save the current project', 'Ctrl+Shift+S', self.save_project, 'save')
        project_menu.addActions([new_project_action, open_project_action, save_project_action])


        # Toolbar
        toolbar = QToolBar('Main Toolbar', self)
        toolbar_icon_size = 20
        toolbar.addActions([new_action, open_action, save_action, run_code_action])

        # Change the color of the icons
        for action in toolbar.actions():
            icon_name = action.property('icon_name')
            action.setIcon(icon(f'fa5s.{icon_name}', color=icon_color, color_active='#87CEFA', scale_factor=1.5))

        self.addToolBar(toolbar)

        # Status Bar
        status_bar = self.statusBar()
        self.status_label = QLabel('Ready', self)
        status_bar.addWidget(self.status_label)

        # Create a button to open a new window
        open_new_window_button = QPushButton('Open New Window', self)
        open_new_window_button.clicked.connect(self.open_new_window)
        toolbar.addWidget(open_new_window_button)

        # Example implementation of a retractable sidebar
        self.sidebar = QDockWidget('File Viewer', self)
        self.sidebar.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)
        self.addDockWidget(Qt.LeftDockWidgetArea, self.sidebar)

        # Set up the main window
        self.setGeometry(100, 100, 1200, 800)
        self.setWindowTitle('sawa IDE')
        self.show()

        # File-related variables
        self.current_file = ''

    def add_new_tab(self):
        # Create a new tab with an editor
        editor = QsciScintilla(self)
        lexer = QsciLexerPython(self)
        editor.setLexer(lexer)

        # Set up line numbers
        font = QFont()
        font.setFamily('Menlo')  # Use a monospaced font
        font.setPointSize(12)
        editor.setMarginsFont(font)
        editor.setMarginWidth(0, '0000')
        editor.setMarginLineNumbers(0, True)

        # Enable undo functionality using QsciCommand
        editor.SendScintilla(QsciScintilla.SCI_SETUNDOCOLLECTION, 1)

        # Add the editor to the tab widget
        index = self.tab_widget.addTab(editor, 'Untitled')

        close_button = QToolButton()
        close_button.setIcon(icon('fa5s.times'))  # Use Font Awesome icon for close
        close_button.clicked.connect(lambda _, i=index: self.close_tab(i))

        # Set up a layout for the tab title and close button
        tab_layout = QHBoxLayout()
        tab_layout.addWidget(QLabel('Filename'))  # Replace 'Untitled' with the actual filename
        tab_layout.addStretch(1)  # Add a stretchable space to push the close button to the right

        # Create a minimal close button
        close_button = QToolButton()
        close_button.setIcon(icon('fa5s.times'))  # Use Font Awesome icon for close
        close_button.setStyleSheet("QToolButton { border: none; padding: 0; margin: 0; max-height: 10px; }")
        close_button.clicked.connect(lambda _, i=index: self.close_tab(i))

        tab_layout.addWidget(close_button)
        tab_layout.setContentsMargins(0, 0, 0, 0)  # Remove margins to make it a rectangle
        tab_layout.setSpacing(4)  # Adjust spacing as needed
        # Set the custom layout for the tab
        tab_widget = QWidget()
        tab_widget.setLayout(tab_layout)
        self.tab_widget.setTabText(index, '')
        self.tab_widget.setTabToolTip(index, 'Untitled')
        self.tab_widget.tabBar().setTabButton(index, QTabBar.RightSide, tab_widget)  # Corrected line

        self.tab_widget.setCurrentIndex(index)

    def create_action(self, name, tooltip, shortcut, callback, icon_name):
        action = QAction(name, self)
        action.setToolTip(tooltip)
        action.setShortcut(QKeySequence(shortcut))
        action.triggered.connect(callback)
        action.setProperty('icon_name', icon_name)
        action.setIcon(icon(f'fa5s.{icon_name}', color=icon_color, color_active='#87CEFA', scale_factor=1.5))
        return action
    
    def open_new_window(self):
        # Create a new window/dialog
        new_window = QDialog(self)
        new_window.setWindowTitle('New Window')

        # Add widgets or other components to the new window as needed
        new_window_layout = QVBoxLayout(new_window)
        new_window_label = QLabel('This is a new window!')
        new_window_layout.addWidget(new_window_label)

        new_window.exec_()  # Show the new window

    def setup_file_explorer_context_menu(self):
        self.file_explorer_context_menu = QMenu(self)
        self.rename_action = QAction('Rename', self)
        self.rename_action.triggered.connect(self.rename_file_or_folder)
        self.delete_action = QAction('Delete', self)
        self.delete_action.triggered.connect(self.delete_file_or_folder)
        self.file_explorer_context_menu.addActions([self.rename_action, self.delete_action])


    def rename_file_or_folder(self):
        selected_index = self.sidebar.widget().currentIndex()
        file_path = self.sidebar.widget().model().filePath(selected_index)
        new_name, ok = QInputDialog.getText(self, 'Rename', 'Enter a new name:', text=os.path.basename(file_path))

        if ok and new_name:
            new_path = os.path.join(os.path.dirname(file_path), new_name)
            os.rename(file_path, new_path)
            self.update_project_explorer(os.path.dirname(file_path))  # Refresh the file explorer

    def dragEnterEvent(self, event):
        event.acceptProposedAction()
        self.setStatusTip('Drop files to move them')

    def dropEvent(self, event):
        files = [url.toLocalFile() for url in event.mimeData().urls()]

        for file in files:
            if os.path.exists(file):
                shutil.move(file, os.path.join(os.path.dirname(self.current_file), os.path.basename(file)))

        self.update_project_explorer(os.path.dirname(self.current_file))  # Refresh the file explorer
        self.clearStatusTip()

    def open_with_external_editor(self, file_path):
        # Implement the logic to open the selected file with an external editor
        # You can use subprocess to open the default system editor or a user-specified editor
        pass

    def delete_file_or_folder(self):
        selected_index = self.sidebar.widget().currentIndex()
        file_path = self.sidebar.widget().model().filePath(selected_index)

        reply = QMessageBox.question(
            self,
            'Delete Confirmation',
            f'Are you sure you want to delete {os.path.basename(file_path)}?',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            if os.path.isfile(file_path):
                os.remove(file_path)
            elif os.path.isdir(file_path):
                os.rmdir(file_path)
            self.update_project_explorer(os.path.dirname(file_path))

    def dragEnterEvent(self, event):
        event.acceptProposedAction()

    def dropEvent(self, event):
        files = [url.toLocalFile() for url in event.mimeData().urls()]

        for file in files:
            if os.path.exists(file):
                shutil.move(file, os.path.join(os.path.dirname(self.current_file), os.path.basename(file)))
                
        self.update_project_explorer(os.path.dirname(self.current_file))  # Refresh the file explorer

    def new_file(self):
        # Create a new tab when a new file is requested
        self.add_new_tab()
        self.update_status('New file created')

    def open_file(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly

        # Get the path of the selected file
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Open File", "", "Python Files (*.py);;Text Files (*.txt);;All Files (*)",
            options=options
        )

        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()

                    # Create a new tab for the opened file
                    self.add_new_tab()
                    # Get the current editor in the active tab
                    editor = self.tab_widget.currentWidget()
                    editor.setText(content)
                    # Update the tab title with the file name
                    self.tab_widget.setTabText(self.tab_widget.currentIndex(), os.path.basename(file_path))
                    self.update_status(f'Opened: {file_path}')

            except UnicodeDecodeError as e:
                # Handle the case where the file cannot be decoded with the specified encoding
                self.show_error_dialog(f"Error reading file {file_path}: {str(e)}")
            except Exception as e:
                # Handle other exceptions
                self.show_error_dialog(f"Error opening file {file_path}: {str(e)}")

    def get_all_files_in_folder(self, folder_path):
        file_names = []
        for root, dirs, files in os.walk(folder_path):
            for file_name in files:
                file_names.append(os.path.join(root, file_name))
        return file_names

    def toggle_sidebar(self):
        if self.sidebar.isHidden():
            self.sidebar.show()
        else:
            self.sidebar.hide()

    def save_file(self):
        if not self.current_file:
            # Define multiple file types for the file dialog
            file_types = "Python Files (*.py);;Text Files (*.txt);;All Files (*)"
            self.current_file, _ = QFileDialog.getSaveFileName(
                self, "Save File", "", file_types
            )

        if self.current_file:
            current_editor = self.tab_widget.currentWidget()  # Get the active tab's editor
            with open(self.current_file, 'w') as file:
                file.write(current_editor.text())  # Use current_editor.text() instead of self.editor.text()

            self.update_status(f'Saved: {self.current_file}')

            # Provide feedback to the user
            QMessageBox.information(self, 'File Saved', f'File saved successfully: {self.current_file}')

    def run_code(self):
        # Get the active tab's editor
        current_editor = self.tab_widget.currentWidget()

        if current_editor:
            code_to_run = current_editor.text()
            local_vars = {}

            try:
                # Capture standard output and error
                import sys
                from io import StringIO

                original_stdout = sys.stdout
                original_stderr = sys.stderr
                sys.stdout = StringIO()
                sys.stderr = StringIO()

                # Execute the code
                exec(code_to_run, globals(), local_vars)

                # Retrieve the captured output and error
                output = sys.stdout.getvalue()
                error_output = sys.stderr.getvalue()

                # Display the output in the interactive console
                self.console_widget.append(output)

                # Display errors in a separate dialog if there are any
                if error_output:
                    self.show_error_dialog(error_output)

            except Exception as e:
                # Display the exception message in a separate dialog
                self.show_error_dialog(str(e))

            finally:
                # Restore the original standard output and error
                sys.stdout = original_stdout
                sys.stderr = original_stderr

            self.update_status('Code executed')

    def update_status(self, message):
        self.status_label.setText(message)

    def show_error_dialog(self, error_message):
        error_dialog = QMessageBox(self)
        error_dialog.setIcon(QMessageBox.Critical)
        error_dialog.setWindowTitle('Code Execution Error')
        error_dialog.setText('An error occurred during code execution:')
        error_dialog.setDetailedText(error_message)
        error_dialog.exec_()

    def close_tab(self, index):
        # Check if there are unsaved changes in the current tab
        editor = self.tab_widget.widget(index)
        if editor.isModified():
            # Display a confirmation dialog
            reply = QMessageBox.question(
                self,
                'Unsaved Changes',
                'You have unsaved changes. Do you want to save before closing?',
                QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel
            )

            if reply == QMessageBox.Yes:
                # Save the file before closing
                self.save_file()
            elif reply == QMessageBox.Cancel:
                # Cancel the tab closing
                return

        # Close the tab
        self.tab_widget.removeTab(index)
        
    def new_window(self):
        new_instance = PythonIDE()
        new_instance.show()
        
    def new_project(self):
        # Dialog to get the project directory
        project_dir = QFileDialog.getExistingDirectory(self, 'Select Project Directory')
        if project_dir:
            # Implement logic to create a new project, set project-specific settings, etc.
            self.update_status(f'New project created: {project_dir}')
            # You may also update other UI elements or settings related to the project.

    def open_project(self):
        # Dialog to get the project directory
        project_dir = QFileDialog.getExistingDirectory(self, 'Open Project')
        if project_dir:
            # Implement logic to open an existing project, load project-specific settings, etc.
            self.update_status(f'Opened project: {project_dir}')

            # Update the sidebar with the project explorer
            self.update_project_explorer(project_dir)

            # You may also update other UI elements or settings related to the project.

    def save_project(self):
        # Implement logic to save the current project
        # This can include saving project-specific settings, ensuring project directory exists, etc.
        self.update_status(f'Saved project')

        # Provide feedback to the user
        QMessageBox.information(self, 'Project Saved', 'Project saved successfully.')

    def update_project_explorer(self, project_dir):
        # Clear existing content in the sidebar
        self.clear_sidebar()

        # Create a QFileSystemModel
        model = QFileSystemModel()
        model.setRootPath(project_dir)

        # Create a QTreeView for the project explorer
        tree_view = QTreeView(self.sidebar)
        tree_view.setHeaderHidden(True)
        tree_view.setModel(model)
        tree_view.setRootIndex(model.index(project_dir))

        # Set column width to fit content
        tree_view.header().setSectionResizeMode(QHeaderView.ResizeToContents)

        # Set up sorting
        tree_view.setSortingEnabled(True)

        # Expand to the root
        tree_view.expandToDepth(0)

        # Connect double-click event to open_file method
        tree_view.doubleClicked.connect(self.open_file_from_treeview)

        # Add the tree view to the sidebar
        self.sidebar.setWidget(tree_view)

    def open_file_from_treeview(self, index):
        # Get the file path from the selected index
        file_path = self.sender().model().filePath(index)

        # Perform logic to open the file (you can adapt this to your needs)
        if os.path.isfile(file_path):
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()

            # Create a new tab for the opened file
            self.add_new_tab()
            # Get the current editor in the active tab
            editor = self.tab_widget.currentWidget()
            editor.setText(content)
            # Update the tab title with the file name
            self.tab_widget.setTabText(self.tab_widget.currentIndex(), os.path.basename(file_path))
            self.update_status(f'Opened: {file_path}')
                    
    def clear_sidebar(self):
        # Clear the existing content in the sidebar
        if self.sidebar.widget():
            self.sidebar.widget().setParent(None)


def main():
    app = QApplication(sys.argv)

    # Set the attribute before creating the QApplication instance
    app.setAttribute(Qt.AA_UseSoftwareOpenGL)

    ide = PythonIDE()
    ide.show()

    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
